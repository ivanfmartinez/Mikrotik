# Number of backup files to keep
# Each backup will generate 2 files (.backup and .rsc)
:global MaxBkFiles
if ([:len $MaxBkFiles] = 0) do={
 	:global MaxBkFiles 10
}

##USE_FUNCTION ISODateTime
##USE_FUNCTION SafeFileName
##USE_FUNCTION FlashPrefix
##USE_FUNCTION SortList

# Compare only the digits in the values... AS the digits are an timestamp will work fine
:global SortListCompareValues do={
##USE_FUNCTION DigitsOnly

    :return ([:tonum [$DigitsOnly $1]] < [:tonum [$DigitsOnly $2]]);
}

:local backupId [$SafeFileName ([/system identity get name] . "-" . [$ISODateTime] . "-" . [/system clock get time-zone-name ]) ]
:local backupFN [$FlashPrefix ("bk-" . $backupId) ]

:local backups [/file find where name~[$FlashPrefix "bk-*" ]]
if ([:len $backups] > $MaxBkFiles) do={
	# Replace internal index with file names...
	:for i from=0 to=([:len $backups] - 1) do={
	    :local bk [:pick $backups $i]
	    :local name [/file get $bk name]
	    if ($i = 0) do= {
	        :set backups (  $name , [:pick $backups 1 [:len $backups] ] )
	    } else={
	        :set backups ( [:pick $backups 0 $i] , $name , [:pick $backups ($i + 1) [:len $backups] ] )
	    }
	}
	:set backups [$SortList $backups]
	:local removeCount ( [:len $backups] - $MaxBkFiles )
	:if ($removeCount > 0) do={
		:for i from=0 to=($removeCount - 1) do={
			:local bk [:pick $backups $i]
			:log info message="Removing old backup file : $bk"
			/file remove [find where name=$bk]
		}
	}
}


/system backup save name="$backupFN"
/export file="$backupFN"

