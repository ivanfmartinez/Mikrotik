# Number of backup files to keep
# Each backup will generate 2 files (.backup and .rsc)
:global BkMaxFiles
:global BkExportOptions
:global BackupUploadUrl
:global BackupUploadUser
:global BackupUploadPassword
# Backup URL can be configured in IFMMkDefs :
#  :global BackupUploadUrl "sftp://server.domain:2222/"

if ([:len $BkMaxFiles] = 0) do={
 	:global BkMaxFiles 10
}
if ([:len $BkExportOptions] = 0) do={
# As the export is not protected by password does not include passwords
 	:global BkExportOptions "hide-sensitive"
}

##USE_FUNCTION ISODateTime
##USE_FUNCTION SafeFileName
##USE_FUNCTION FlashPrefix
##USE_FUNCTION SortList
##USE_FUNCTION RemoveOldFiles

# Compare only the digits in the values... AS the digits are an timestamp will work fine
:global SortListCompareValues do={
##USE_FUNCTION DigitsOnly

    :return ([:tonum [$DigitsOnly $1]] < [:tonum [$DigitsOnly $2]]);
}

:local backupId [$SafeFileName ([/system identity get name] . "-" . [/system resource get version ] . "-" . [$ISODateTime] . "-" . [/system clock get time-zone-name ]) ]
:local backupFN [$FlashPrefix ("bk-" . $backupId) ]

[$RemoveOldFiles "bk-*" $BkMaxFiles]

/system backup save name="$backupFN"
# To use dynamic parameters must use :execute , but its not working on some devices and does not give error message
# And v6.47 are not executing export command with "not enough permissions" error
# using the on-error the script will continue if export does not work
:do {
	if ("$BkExportOptions" = "hide-sensitive") do={
		/export hide-sensitive file="$backupFN"
	} else={
		:execute "/export $BkExportOptions file=\"$backupFN\"" 
	}
} on-error={ :put "Error executing export command" }
# Wait for backup finish as it appers to run in background in some devices...
:delay 10

# Requires a server without authentication (using the source IP as id)
:if ([:len $BackupUploadUrl] > 0) do={

	if ([:len $BackupUploadUser] = 0) do={
	 	:global BackupUploadUser "mikrotik"
	}
	if ([:len $BackupUploadPassword] = 0) do={
	 	:global BackupUploadPassword "password"
	}

        :local fn  ("$backupFN" . ".backup")
	:local backupurl ($BackupUploadUrl . $fn)
	/tool fetch url="$backupurl" src-path="$fn" user="$BackupUploadUser" password="$BackupUploadPassword"  upload=yes

        :local fn  ("$backupFN" . ".rsc")
	:local backupurl ($BackupUploadUrl . $fn)
	/tool fetch url="$backupurl" src-path="$fn" user="$BackupUploadUser" password="$BackupUploadPassword"  upload=yes

}
